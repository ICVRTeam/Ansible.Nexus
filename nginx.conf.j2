server {
    if ($host = pkg.ictools.io) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    server_name pkg.ictools.io;
     location / {
                return 301 https://$host$request_uri;
        }

}
server {
    listen 443 ssl;
    server_name pkg.ictools.io;
# Allow upload of large files,
# needed if Nexus is going to host large size artifacts
    client_max_body_size 20G;
#    proxy_max_temp_file_size 2G;
# Add the certificate and key generated earlier
    ssl_certificate /etc/letsencrypt/live/pkg.ictools.io/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/pkg.ictools.io/privkey.pem; # managed by Certbot

    location / {
       proxy_set_header Host $host;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto "https";
       proxy_pass http://127.0.0.1:8081;
    }
    location /v2 {
     proxy_set_header Host $host:$server_port;
     proxy_set_header X-Real-IP $remote_addr;
     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     proxy_set_header X-Forwarded-Proto "https";
     proxy_pass http://127.0.0.1:8081/repository/ic-docker-registry/$request_uri;
    }
    location /v1 {
     proxy_set_header Host $host:$server_port;
     proxy_set_header X-Real-IP $remote_addr;
     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     proxy_set_header X-Forwarded-Proto "https";
     proxy_pass http://127.0.0.1:8081/repository/ic-docker-registry/$request_uri;
    }


}